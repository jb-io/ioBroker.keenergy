{
  "version": 3,
  "sources": ["../../src/lib/KebaClient.ts"],
  "sourcesContent": ["'use strict';\n\nimport globalUtils from './globalUtils';\nimport Client from './Client';\n\ntype ResponseDateTime = {\n    hours: number;\n    seconds: number;\n    month: number;\n    year: number;\n    minutes: number;\n    day: number;\n};\n\ntype UnitObject = {\n    textImperial: string;\n    divisor: string;\n    textIso: string;\n    multiplier: string;\n    unitId: string;\n};\n\ntype FormatObject = {\n    formatTexts: string;\n    formatId: string;\n    postComma: string;\n};\n\ntype ReadWriteVarsAttribute = {\n    formatId: string;\n    longText: string;\n};\n\ntype ReadWriteVarsResponse = {\n    name: string;\n    value: string;\n    attributes?: ReadWriteVarsAttribute;\n};\n\ntype ReadVarsRequest = {\n    name: string;\n    attr?: '1' | '0';\n};\n\nexport type WriteVarsRequest = {\n    name: string;\n    value: string;\n};\n\nclass KebaClient {\n    private client: Client;\n\n    constructor() {\n        // noinspection HttpUrlsUsage\n        this.client = new Client(`http://${globalUtils.config.host}`, 3000);\n    }\n\n    /**\n     * @returns {Promise<ResponseDateTime | null>}\n     */\n    async getDateTime(): Promise<ResponseDateTime | null> {\n        return new Promise((resolve) => {\n            this.client\n                .post('/dateTime?action=getDateTime')\n                .then((data) => {\n                    resolve(data as ResponseDateTime);\n                })\n                .catch(() => {\n                    globalUtils.log.error('Failed to get DateTime from host.');\n                    resolve(null);\n                });\n        });\n    }\n\n    /**\n     * @returns {Promise<\"de\" | \"en\" | \"fr\" | null>}\n     */\n    async getLanguageCode(): Promise<\"de\" | \"en\" | \"fr\" | null> {\n        return new Promise((resolve) => {\n            this.client\n                .post('/var/readWriteVars?action=read', { name: 'APPL.CtrlAppl.sParam.hmiRetainData.systemLanguage' })\n                .then((data) => {\n                    resolve(data.value as \"de\" | \"en\" | \"fr\");\n                })\n                .catch(() => {\n                    globalUtils.log.error('Failed to get LanguageCode from host.');\n                    resolve(null);\n                });\n        });\n    }\n\n    /**\n     * @returns {Promise<\"ISO\" | \"imperial\" | null>}\n     */\n    async getSystemUnit(): Promise<\"ISO\" | \"imperial\" | null> {\n        return new Promise((resolve) => {\n            this.client\n                .post('/var/readWriteVars?action=read', { name: 'APPL.CtrlAppl.sParam.hmiRetainData.systemUnit' })\n                .then((data) => {\n                    resolve(data.value as \"ISO\" | \"imperial\");\n                })\n                .catch(() => {\n                    globalUtils.log.error('Failed to get SystemUnit from host.');\n                    resolve(null);\n                });\n        });\n    }\n\n    /**\n     * @param {string} languageCode\n     * @returns {Promise<Array<UnitObject>>}\n     */\n    async readAllUnits(languageCode: string): Promise<UnitObject[]> {\n        return new Promise((resolve) => {\n            this.client\n                .post(`/var/readAllUnits?action=getUnits&languageCode=${languageCode}`)\n                .then((data) => {\n                    resolve(data.units as UnitObject[]);\n                })\n                .catch(() => {\n                    globalUtils.log.error('Failed to get all Units from host.');\n                    resolve([]);\n                });\n        });\n    }\n\n    /**\n     * @param {string} languageCode\n     * @returns {Promise<Array<FormatObject>>}\n     */\n    async readAllFormats(languageCode: string): Promise<FormatObject[]> {\n        return new Promise((resolve) => {\n            this.client\n                .post(`/var/readAllFormats?action=getFormats&languageCode=${languageCode}`)\n                .then((data) => {\n                    resolve(data.formats as FormatObject[]);\n                })\n                .catch(() => {\n                    globalUtils.log.error('Failed to get all Formats from host.');\n                    resolve([]);\n                });\n        });\n    }\n\n    /**\n     * @returns {Promise<string>}\n     */\n    async readMaskTreeGetContent(): Promise<string> {\n        return new Promise((resolve) => {\n            this.client\n                .post('/readMaskTree?action=getcontent', { filename: 'DetailMask.xml' })\n                .then(({ content: xmlContent }) => {\n                    resolve(xmlContent);\n                })\n                .catch(() => {\n                    globalUtils.log.error('Failed to read mask tree from host.');\n                    resolve('');\n                });\n        });\n    }\n\n    /**\n     * @param {string} languageCode\n     * @param {Array<ReadVarsRequest>} data\n     * @returns {Promise<Array<ReadWriteVarsResponse>>}\n     */\n    async readVars(languageCode: string, data: ReadVarsRequest[]): Promise<ReadWriteVarsResponse[]> {\n        return new Promise((resolve) => {\n            this.client\n                .post(`/var/readWriteVars?languageCode=${languageCode}`, data)\n                .then((responseData) => {\n                    resolve(responseData as ReadWriteVarsResponse[]);\n                })\n                .catch(() => {\n                    const nameList = data.map(({ name }) => name);\n                    globalUtils.log.error(\n                        `Failed reading vars (${nameList.length}): \\n\"` + JSON.stringify(nameList)\n                    );\n                    resolve([]);\n                });\n        });\n    }\n\n    /**\n     * @param {Array<WriteVarsRequest>} data\n     * @returns {Promise<boolean>}\n     */\n    async writeVars(data: WriteVarsRequest[]): Promise<boolean> {\n        return new Promise((resolve) => {\n            this.client\n                .post('/var/readWriteVars?action=set', data)\n                .then(() => {\n                    resolve(true);\n                })\n                .catch(() => {\n                    const nameList = data.map(({ name }) => name);\n                    globalUtils.log.error(\n                        `Failed writing vars (${nameList.length}): \\n\"` + JSON.stringify(nameList)\n                    );\n                    resolve(false);\n                });\n        });\n    }\n}\n\nexport default KebaClient;\n"],
  "mappings": "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",
  "names": ["Client", "globalUtils"]
}
