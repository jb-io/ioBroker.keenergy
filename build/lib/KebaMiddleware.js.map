{
  "version": 3,
  "sources": ["../../src/lib/KebaMiddleware.ts"],
  "sourcesContent": ["'use strict';\n\nimport KebaStateTransformer from './KebaStateTransformer';\nimport Keba from './Keba';\n\ntype VariableTypes = 'text' | 'numeric' | 'enum' | 'bool';\ntype StateValue = string | number | boolean;\n\ninterface StateCommon {\n    name: string;\n    type: 'number' | 'boolean' | 'string';\n    role: string;\n    read: boolean;\n    write: boolean;\n    unit?: string;\n    states?: Record<number, string>;\n    min?: number;\n    max?: number;\n}\n\ninterface StateNative {\n    name: string;\n    type: 'numeric' | 'bool' | 'enum' | 'text';\n}\n\ninterface StateConfiguration {\n    type: string;\n    common: StateCommon;\n    native: StateNative;\n}\n\nclass KebaMiddleware {\n    private _keba: Keba;\n    private _stateConfigurations: Record<string, StateConfiguration> | null = null;\n    private _idToName: Record<string, string> = {};\n    private _nameToId: Record<string, string> = {};\n\n    constructor() {\n        this._keba = new Keba();\n    }\n\n    get keba(): Keba {\n        return this._keba;\n    }\n\n    private normalizeStateValue(val: string, type: VariableTypes): StateValue {\n        switch (type) {\n            case 'numeric':\n                return parseFloat(val);\n            case 'bool':\n                return val === 'true';\n        }\n        return val;\n    }\n\n    private denormalizeStateValue(val: string | number | boolean, type: VariableTypes): string {\n        switch (type) {\n            case 'numeric':\n                return `${val}`;\n            case 'bool':\n                return val ? 'true' : 'false';\n        }\n        return `${val}`;\n    }\n\n    async readStates(ids: string[]): Promise<Record<string, StateValue>> {\n        const states: Record<string, StateValue> = {};\n\n        const names = ids.map((id) => this.getNameFromId(id));\n        const data = await this._keba.readVars(names);\n\n        for (const { name, value } of data) {\n            const id = this.getIdFromName(name);\n            const stateConfiguration = await this.getStateConfiguration(id);\n            states[id] = this.normalizeStateValue(value, stateConfiguration.native.type);\n        }\n\n        return states;\n    }\n\n    async readState(id: string): Promise<StateValue> {\n        const name = this.getNameFromId(id);\n        const { value } = await this._keba.readVar(name);\n\n        const stateConfiguration = await this.getStateConfiguration(id);\n        return this.normalizeStateValue(value, stateConfiguration.native.type);\n    }\n\n    async writeState(id: string, value: StateValue): Promise<StateValue> {\n        const stateConfiguration = await this.getStateConfiguration(id);\n        if (!stateConfiguration.common.write) {\n            throw new Error(`State ${id} is not writable.`);\n        }\n        await this._keba.writeVar(\n            stateConfiguration.native.name,\n            this.denormalizeStateValue(value, stateConfiguration.native.type)\n        );\n        return await this.readState(id);\n    }\n\n    async getStateConfigurations(): Promise<Record<string, StateConfiguration>> {\n        if (!this._stateConfigurations) {\n            this._stateConfigurations = {};\n\n            const stateTransformer = new KebaStateTransformer();\n\n            const readWriteVars = await this._keba.getReadWriteVars();\n            for (const name in readWriteVars) {\n                const stateConfiguration = stateTransformer.transformVarToSate(name, readWriteVars[name]);\n                const id = stateTransformer.transformNameToId(name);\n\n                this._nameToId[name] = id;\n                this._idToName[id] = name;\n                this._stateConfigurations[id] = stateConfiguration;\n            }\n        }\n\n        return this._stateConfigurations;\n    }\n\n    /**\n     * @param {string} id\n     * @returns {Promise<StateConfiguration>}\n     */\n    async getStateConfiguration(id: string): Promise<StateConfiguration> {\n        return (await this.getStateConfigurations())[id];\n    }\n\n    /**\n     * @param {string} name\n     * @returns {string}\n     */\n    private getIdFromName(name: string): string {\n        return this._nameToId[name];\n    }\n\n    /**\n     * @param {string} id\n     * @returns {string}\n     */\n    private getNameFromId(id: string): string {\n        return this._idToName[id];\n    }\n}\n\nexport default KebaMiddleware;\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA,kCAAiC;AACjC,kBAAiB;AA4BjB,MAAM,eAAe;AAAA,EACT;AAAA,EACA,uBAAkE;AAAA,EAClE,YAAoC,CAAC;AAAA,EACrC,YAAoC,CAAC;AAAA,EAE7C,cAAc;AACV,SAAK,QAAQ,IAAI,YAAAA,QAAK;AAAA,EAC1B;AAAA,EAEA,IAAI,OAAa;AACb,WAAO,KAAK;AAAA,EAChB;AAAA,EAEQ,oBAAoB,KAAa,MAAiC;AACtE,YAAQ,MAAM;AAAA,MACV,KAAK;AACD,eAAO,WAAW,GAAG;AAAA,MACzB,KAAK;AACD,eAAO,QAAQ;AAAA,IACvB;AACA,WAAO;AAAA,EACX;AAAA,EAEQ,sBAAsB,KAAgC,MAA6B;AACvF,YAAQ,MAAM;AAAA,MACV,KAAK;AACD,eAAO,GAAG,GAAG;AAAA,MACjB,KAAK;AACD,eAAO,MAAM,SAAS;AAAA,IAC9B;AACA,WAAO,GAAG,GAAG;AAAA,EACjB;AAAA,EAEA,MAAM,WAAW,KAAoD;AACjE,UAAM,SAAqC,CAAC;AAE5C,UAAM,QAAQ,IAAI,IAAI,CAAC,OAAO,KAAK,cAAc,EAAE,CAAC;AACpD,UAAM,OAAO,MAAM,KAAK,MAAM,SAAS,KAAK;AAE5C,eAAW,EAAE,MAAM,MAAM,KAAK,MAAM;AAChC,YAAM,KAAK,KAAK,cAAc,IAAI;AAClC,YAAM,qBAAqB,MAAM,KAAK,sBAAsB,EAAE;AAC9D,aAAO,EAAE,IAAI,KAAK,oBAAoB,OAAO,mBAAmB,OAAO,IAAI;AAAA,IAC/E;AAEA,WAAO;AAAA,EACX;AAAA,EAEA,MAAM,UAAU,IAAiC;AAC7C,UAAM,OAAO,KAAK,cAAc,EAAE;AAClC,UAAM,EAAE,MAAM,IAAI,MAAM,KAAK,MAAM,QAAQ,IAAI;AAE/C,UAAM,qBAAqB,MAAM,KAAK,sBAAsB,EAAE;AAC9D,WAAO,KAAK,oBAAoB,OAAO,mBAAmB,OAAO,IAAI;AAAA,EACzE;AAAA,EAEA,MAAM,WAAW,IAAY,OAAwC;AACjE,UAAM,qBAAqB,MAAM,KAAK,sBAAsB,EAAE;AAC9D,QAAI,CAAC,mBAAmB,OAAO,OAAO;AAClC,YAAM,IAAI,MAAM,SAAS,EAAE,mBAAmB;AAAA,IAClD;AACA,UAAM,KAAK,MAAM;AAAA,MACb,mBAAmB,OAAO;AAAA,MAC1B,KAAK,sBAAsB,OAAO,mBAAmB,OAAO,IAAI;AAAA,IACpE;AACA,WAAO,MAAM,KAAK,UAAU,EAAE;AAAA,EAClC;AAAA,EAEA,MAAM,yBAAsE;AACxE,QAAI,CAAC,KAAK,sBAAsB;AAC5B,WAAK,uBAAuB,CAAC;AAE7B,YAAM,mBAAmB,IAAI,4BAAAC,QAAqB;AAElD,YAAM,gBAAgB,MAAM,KAAK,MAAM,iBAAiB;AACxD,iBAAW,QAAQ,eAAe;AAC9B,cAAM,qBAAqB,iBAAiB,mBAAmB,MAAM,cAAc,IAAI,CAAC;AACxF,cAAM,KAAK,iBAAiB,kBAAkB,IAAI;AAElD,aAAK,UAAU,IAAI,IAAI;AACvB,aAAK,UAAU,EAAE,IAAI;AACrB,aAAK,qBAAqB,EAAE,IAAI;AAAA,MACpC;AAAA,IACJ;AAEA,WAAO,KAAK;AAAA,EAChB;AAAA;AAAA;AAAA;AAAA;AAAA,EAMA,MAAM,sBAAsB,IAAyC;AACjE,YAAQ,MAAM,KAAK,uBAAuB,GAAG,EAAE;AAAA,EACnD;AAAA;AAAA;AAAA;AAAA;AAAA,EAMQ,cAAc,MAAsB;AACxC,WAAO,KAAK,UAAU,IAAI;AAAA,EAC9B;AAAA;AAAA;AAAA;AAAA;AAAA,EAMQ,cAAc,IAAoB;AACtC,WAAO,KAAK,UAAU,EAAE;AAAA,EAC5B;AACJ;AAEA,IAAO,yBAAQ;",
  "names": ["Keba", "KebaStateTransformer"]
}
